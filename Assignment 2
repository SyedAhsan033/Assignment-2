Assignment 1 : The below program is to guess the correct number between 1 to 100

def number_guessing_game():
    if number.isdigit() and 1<= int(number) <=100:
        return True
    else:
        return False
		
	def GetRandomNumber():
		return random.randint(1,100)
		
	def GuessTheNumber(DisplayText):
		InputNmber = input(DisplayText)
		return InputNmber
		
	def isGuessed(InputNmber,RandomNumber):
		if(InputNumber>RandomNumber):
			print("Guessed number is very high")
			return false
		if(InputNumber<RandomNumber):
			print("Guessed number is very low")
			return false
		else:
			print("Guessed number is Correct")
			return true
			
	def isGuessingNumber():
		RandomNumber=GuessTheNumber()
		InputNumber=GetInput("Guess a number between 1 to 100")
		
		while true:
				if(not isNumberBetweenOneToHundred(InputNumber)):
				InputNumber=GetInput("This number is not in between 1 to 100")
				continue
			
			InputNumber=int(InputNumber)
			if(not isGuessed(InputNumber,RandomNumber)):
				print("Guessed number is not matched try again")
				InputNumber=GetInput("Guess a number between 1 to 100")
				continue
			else:
				break;
	def main():
		isGuessingNumber()
		main()

===============================================================================================================================================================

Assignment 2 : Find the floor of the expected value(mean) of the subarray from Left to Right.

using System;
using System.Numerics;
class MyClass {
		private int[] GenerateArray(){
		 var array = array.ConvertAll(Console.ReadLine().Split(''),int.parse);
		 return array;
		}
		private long[] createsubArray(int ArrayLength, int[] arr){
		 long[] sumarr = new long[ArrayLength+1];
		 sumarr[0] = 0;
		 for(int i=1; i<ArrayLength; i++)
		 {
		  sumarr[i] = sumarr[i+1]+arr[i-1];
		 }
		 return sumarr;
		}
		private  void FindMeanForAllQueries(int NoOfQueries, long[] sumarr){
		for(var x=0; x<NoOfQueries; x++)
		{
			var RightLeftArray = array.ConvertAll(Console.ReadLine().Split(''),int.parse);
			var right = RightLeftArray[1];
			var left = RightLeftArray[0];
			Console.WriteLine((long)(long)(sumarr[right]-sumarr[left-1])/(right-left+1));
		}
		}
	Static void main(string[] agrs){
		MyClass class = new MyClass();
		var arr = class.GenerateArray();
		int ArrayLength = arr[0];
		int NoOfQueries = arr[1];
		var InputArray = class.GenerateArray();
		var sumArray =  class.CreateSubArray(ArrayLength,InputArray);
		class.FindMeanForAllQueries(NoOfQueries,sumArray);
	}

===========================================================================================================================================================
 
Assignment 3 :

public class CustomerSearch
    {
    public List <Customer> searchByCountry(String country)
        {
         varquery = SELECT c.CustomerID 
                    FROM c in 

        return query.ToList();
    }
// Search customer by companyname
    public List <Customer> searchByCompanyName(string company)
    {
        var query = SELECT orderby c.CustomerID ascending 
                    FROM c in db.customers
                    where c.Country.Contains(company)
                    orderby c.CustomerID ascending;

        return query.ToList();
    }

// Search customer by contact person
    public List <Customer> searchByContact(string contact)
    {
        var query = SELECT c.CustomerID
                    FROM c in db.customers
					where c.Country.Contains(contact)
					orderby c.CustomerID ascending
					select c;
                    
        return query.ToList();
    }

    public string exportToCSV(List <Customer> customerList)
    {
        StringBuilder stringBuilder = new StringBuilder();
        foreach(var custmer in customerList)
        {
            stringBuilder.AppendFormat("{0},{1}, {2}, {3}", custmer.CustomerID, custmer.CompanyName, customer.ContactName, customer.Country);
            stringBuilder.AppendLine();
        }
        return stringBuilder.ToString();
     }
} 

======================================================================================================================================================


Assignment 4: 

// Does this Book class follow SRP?

Yes, It follows Single Responsibility Principle (SRP)

============================================================================================================================================================

Assignment 5:


Class Employee{
    int id;
	string name;
	string department;
	bool: working
	
	public:
		saveEmployeeTODatabase()
		printEmployeeDetailReportXML()
		printEmployeeDetailReportCSV()
		terminateEmployee()
		bool isWorking()
}; 

